// Mocks generated by Mockito 5.4.6 from annotations
// in photo_dumper/test/unit/features/photo_comparison/presentation/bloc/comparison_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:photo_dumper/core/error/failures.dart' as _i6;
import 'package:photo_dumper/features/photo_comparison/domain/entities/comparison_session.dart'
    as _i7;
import 'package:photo_dumper/features/photo_comparison/domain/repositories/comparison_repository.dart'
    as _i2;
import 'package:photo_dumper/features/photo_comparison/domain/usecases/comparison_usecases.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeComparisonRepository_0 extends _i1.SmartFake
    implements _i2.ComparisonRepository {
  _FakeComparisonRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ComparisonUseCases].
///
/// See the documentation for Mockito's code generation for more information.
class MockComparisonUseCases extends _i1.Mock
    implements _i4.ComparisonUseCases {
  MockComparisonUseCases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ComparisonRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeComparisonRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ComparisonRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ComparisonSession>>>
  getComparisonSessions() =>
      (super.noSuchMethod(
            Invocation.method(#getComparisonSessions, []),
            returnValue:
                _i5.Future<
                  _i3.Either<_i6.Failure, List<_i7.ComparisonSession>>
                >.value(
                  _FakeEither_1<_i6.Failure, List<_i7.ComparisonSession>>(
                    this,
                    Invocation.method(#getComparisonSessions, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ComparisonSession>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ComparisonSession?>>
  getComparisonSession(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getComparisonSession, [id]),
            returnValue:
                _i5.Future<
                  _i3.Either<_i6.Failure, _i7.ComparisonSession?>
                >.value(
                  _FakeEither_1<_i6.Failure, _i7.ComparisonSession?>(
                    this,
                    Invocation.method(#getComparisonSession, [id]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.ComparisonSession?>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> saveComparisonSession(
    _i7.ComparisonSession? session,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveComparisonSession, [session]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#saveComparisonSession, [session]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> deleteComparisonSession(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteComparisonSession, [id]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#deleteComparisonSession, [id]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> getAllPhotoIdsInUse() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPhotoIdsInUse, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                  _FakeEither_1<_i6.Failure, List<String>>(
                    this,
                    Invocation.method(#getAllPhotoIdsInUse, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}
