// Mocks generated by Mockito 5.4.6 from annotations
// in photo_dumper/test/unit/features/photo_comparison/presentation/bloc/photo_comparison_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:photo_dumper/core/error/failures.dart' as _i6;
import 'package:photo_dumper/core/services/platform_service.dart' as _i10;
import 'package:photo_dumper/features/photo_comparison/domain/entities/photo.dart'
    as _i7;
import 'package:photo_dumper/features/photo_comparison/domain/repositories/photo_repository.dart'
    as _i2;
import 'package:photo_dumper/features/photo_comparison/domain/services/photo_manager_service.dart'
    as _i8;
import 'package:photo_dumper/features/photo_comparison/domain/usecases/photo_usecases.dart'
    as _i4;
import 'package:photo_manager/photo_manager.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhotoRepository_0 extends _i1.SmartFake
    implements _i2.PhotoRepository {
  _FakePhotoRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PhotoUseCases].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoUseCases extends _i1.Mock implements _i4.PhotoUseCases {
  MockPhotoUseCases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PhotoRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePhotoRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PhotoRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Photo>>> getPhotosFromGallery() =>
      (super.noSuchMethod(
            Invocation.method(#getPhotosFromGallery, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Photo>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Photo>>(
                    this,
                    Invocation.method(#getPhotosFromGallery, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Photo>>>);
}

/// A class which mocks [PhotoManagerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoManagerService extends _i1.Mock
    implements _i8.PhotoManagerService {
  MockPhotoManagerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<String>> deleteWithIds(List<String>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWithIds, [ids]),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<void> moveToTrash(List<_i9.AssetEntity>? entities) =>
      (super.noSuchMethod(
            Invocation.method(#moveToTrash, [entities]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i9.AssetEntity?> assetEntityFromId(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#assetEntityFromId, [id]),
            returnValue: _i5.Future<_i9.AssetEntity?>.value(),
          )
          as _i5.Future<_i9.AssetEntity?>);
}

/// A class which mocks [PhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoRepository extends _i1.Mock implements _i2.PhotoRepository {
  MockPhotoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Photo>>> getPhotosFromGallery() =>
      (super.noSuchMethod(
            Invocation.method(#getPhotosFromGallery, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Photo>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Photo>>(
                    this,
                    Invocation.method(#getPhotosFromGallery, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Photo>>>);
}

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i10.PlatformService {
  MockPlatformService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid =>
      (super.noSuchMethod(Invocation.getter(#isAndroid), returnValue: false)
          as bool);
}
